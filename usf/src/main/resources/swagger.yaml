openapi: 3.0.3
info:
  title: Swagger USF API - OpenAPI 0.0.1
  description: |-
    A USF (Unidade de Saúde da Família) nada mais é que uma unidade pública de saúde destinada
    a realizar atenção contínua nas especialidades básicas, com uma equipe multiprofissional
    habiitada para desenvolver as atividades de promoção, proteção e recuperação, características
    do nível primário de atenção. Após conversa com funcionários dessas unidades notamos que há uma
    complexidade na gestão desse ambiente, pois precisam fazer a comunicação com outras USFs, seja para
    realizar pedidos de recursos ou para gestão de profissionais, de maneira manual através de pranchetas 
    e documentos por escrito. Fazendo o sistema desses ambientes vitais para o cuidado das comunidades brasileiras 
    ficam propensos a erros e lentidão no atendimento.

    Objetivando desenvolvimento para esse serviço, desenvolvemos uma API, para automatizar esses processos defasados.


    Alguns links que podem ser interessantes:
    - [Repositório da USF API](https://github.com/solanokruger/usf-project)
    - [Toda documentação do projeto](https://docs.google.com/document/d/1Rgm3JiFKQBkO_tDVDDw1Mr-FGm9hP7MV-BGx2f4m3HE/edit?usp=sharing)
  termsOfService: http://swagger.io/terms/
  contact:
    email: luis.gustavo@compasso.com.br
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: API local
tags:
  - name: Doctor
    description: Tudo sobre os Doutores.
  - name: Team
    description: Tudo sobre os Times.
  - name: USF
    description: Tudo sobre as USFs.
  - name: Request
    description: Tudo sobre os Requests.
  - name: Resource
    description: Tudo sobre os itens.
  - name: Inventory
    description: Tudo sobre o inventário.
  - name: User
    description: Tudo sobre os usuários.
paths:
  /doctor:
    post:
      tags:
        - Doctor
      summary: Adiciona um novo Doutor.
      description: Adicionar um novo Doutor no sistema.
      operationId: addDoctor
      requestBody:
        description: Criando um novo Doutor.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad Request
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Doctor
      summary: Listar todos Doutores
      description: Retorna uma lista de Doutores
      operationId: getDoctor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: Doctor not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /doctor/{idDoctor}:
    put:
      tags:
        - Doctor
      summary: Atualiza um Doutor existente
      description: Atualiza um Doutor existente pelo ID
      operationId: updateDoctor
      requestBody:
        description: Atualiza um Doutor existente pelo ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad Request
        "404":
          description: Doctor not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Doctor
      summary: Procura um Doutor pelo ID
      description: Retorna apenas um Doutor
      operationId: getDoctorById
      parameters:
        - name: doctorId
          in: path
          description: ID do Doutor para atualizar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad Request
        "404":
          description: Doctor not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Doctor
      summary: Remove um Doutor pelo ID
      description: Remove um Doutor pelo ID
      operationId: deleteDoctor
      parameters:
        - name: doctorId
          in: path
          description: ID do Doutor para remover
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /doctor{idDoctor}/team/{idTeam}:
    post:
      tags:
        - Doctor
      summary: Vincula um Doutor a um Time
      description: Vincula um Doutor a um Time
      operationId: linkDoctorTeam
      parameters:
        - name: idDoctor
          in: path
          description: ID do Doutor a ser vinculado.
          required: true
          schema:
            type: integer
            format: int64
        - name: idTeam
          in: path
          description: ID do Time que o Doutor irá ser vinculado.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "405":
          description: Invalid input
        "400":
          description: Bad Request
        "404":
          description: Doctor not found
    delete:
      tags:
        - Doctor
      summary: Remove o Doutor de um Time
      description: Remove um Doutor de um time específico.
      operationId: deleteDoctorTeam
      parameters:
        - name: idDoctor
          in: path
          description: ID do Doutor a ser removido.
          required: true
          schema:
            type: integer
            format: int64
        - name: idTeam
          in: path
          description: ID do time que o Doutor irá ser removido.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
        "404":
          description: Doctor not found

  /team:
    post:
      tags:
        - Team
      summary: Adiciona um novo time.
      description: Adiciona um novo time.
      operationId: addTeam
      requestBody:
        description: Cria um novo time.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
          application/xml:
            schema:
              $ref: "#/components/schemas/Team"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Team"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
            application/xml:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          description: Bad request
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Team
      summary: Retorna todos os times
      description: Retorna uma lista com todos os times
      operationId: getTeam
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          description: Bad request
      security:
        - api_key: []
  /team/{idTeam}:
    get:
      tags:
        - Team
      summary: Procura um time pelo ID
      description: Retorna apenas um time
      operationId: getTeamById
      parameters:
        - name: idTeam
          in: path
          description: ID do time para Requisição.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
            application/xml:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          description: Bad Request
        "404":
          description: Team not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - Team
      summary: Atualiza um time
      description: Atualiza um time existente pelo ID
      operationId: updateTeam
      requestBody:
        description: Atualiza o time
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
          application/xml:
            schema:
              $ref: "#/components/schemas/Team"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Team"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
            application/xml:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          description: Bad Request
        "404":
          description: Team not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Team
      summary: Remove um time
      description: Remove um time
      operationId: deleteTeam
      parameters:
        - name: idTeam
          in: path
          description: ID do time para deletar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /team{idTeam}/usf/{idUsf}:
    post:
      tags:
        - Team
      summary: Vincula um time a uma usf
      description: Vincula um time a uma usf
      operationId: linkDoctorTeam
      parameters:
        - name: idTeam
          in: path
          description: ID do time que vai ser vinculado.
          required: true
          schema:
            type: integer
            format: int64
        - name: idUsf
          in: path
          description: ID da USF que vai ser vinculada.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usf"
          application/xml:
            schema:
              $ref: "#/components/schemas/Usf"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Usf"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usf"
        "400":
          description: Bad request
        "404":
          description: USF not found
        "405":
          description: Invalid input
    delete:
      tags:
        - Team
      summary: Remove um time de uma USF
      description: Remove um determinado time de uma determinada USF
      operationId: deleteTeamUsf
      parameters:
        - name: idTeam
          in: path
          description: ID do time que vai ser removido.
          required: true
          schema:
            type: integer
            format: int64
        - name: idUsf
          in: path
          description: ID da Usf que vai ser removida.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
        "404":
          description: Team not found

  /usf:
    get:
      tags:
        - USF
      summary: Lista todas USFs
      description: Retorna todas Usfs
      operationId: getUsf
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usf"
            application/xml:
              schema:
                $ref: "#/components/schemas/Usf"
        "400":
          description: Bad request
        "404":
          description: USF not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - USF
      summary: Cadastra uma nova USF
      description: Cadastra uma nova USF
      operationId: addUsf
      requestBody:
        description: Cadastra uma nova USF
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usf"
          application/xml:
            schema:
              $ref: "#/components/schemas/Usf"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Usf"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usf"
            application/xml:
              schema:
                $ref: "#/components/schemas/Usf"
        "400":
          description: Bad request
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /usf/{idUsf}:
    put:
      tags:
        - USF
      summary: Atualiza uma USF existente
      description: Atualiza uma USF existente pelo Id
      operationId: updateUsf
      requestBody:
        description: Atualiza uma USF existente pelo Id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usf"
          application/xml:
            schema:
              $ref: "#/components/schemas/Usf"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Usf"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usf"
            application/xml:
              schema:
                $ref: "#/components/schemas/Usf"
        "400":
          description: Bad Request
        "404":
          description: Usf not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - USF
      summary: Procura uma USF pelo ID
      description: Retorna uma USF
      operationId: getUsfById
      parameters:
        - name: usfId
          in: path
          description: ID da USF para retornar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usf"
            application/xml:
              schema:
                $ref: "#/components/schemas/Usf"
        "400":
          description: Bad Request
        "404":
          description: USF not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - USF
      summary: Remove a USF
      description: Remove a USF
      operationId: deleteUsf
      parameters:
        - name: usfId
          in: path
          description: ID da USF para remover.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /request:
    post:
      tags:
        - Request
      summary: Adiciona uma nova Requisição
      description: Adiciona uma nova Requisição
      operationId: addRequest
      requestBody:
        description: Cria uma nova Requisição
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request"
          application/xml:
            schema:
              $ref: "#/components/schemas/Request"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Request"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
            application/xml:
              schema:
                $ref: "#/components/schemas/Request"
        "400":
          description: Bad request
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Request
      summary: Lista todas Requesições
      description: Retorna todas Requesições
      operationId: getRequests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
            application/xml:
              schema:
                $ref: "#/components/schemas/Request"
        "400":
          description: Bad request
        "404":
          description: Request not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /request/{requestId}:
    put:
      tags:
        - Request
      summary: Atualiza uma Requisição
      description: Atualiza uma Requisição pelo ID.
      operationId: updateRequest
      requestBody:
        description: Atualiza uma requisição pelo ID.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request"
          application/xml:
            schema:
              $ref: "#/components/schemas/Request"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Request"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
            application/xml:
              schema:
                $ref: "#/components/schemas/Request"
        "400":
          description: Bad Request
        "404":
          description: Request not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Request
      summary: Procura a Requisição pelo ID
      description: Retorna uma requisição
      operationId: getRequestById
      parameters:
        - name: requestId
          in: path
          description: ID da Requisição
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
            application/xml:
              schema:
                $ref: "#/components/schemas/Request"
        "400":
          description: Bad Request
        "404":
          description: Request not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Request
      summary: Remove a requisição
      description: Remove a requisição
      operationId: deleteRequest
      parameters:
        - name: requestId
          in: path
          description: ID da requisição para remover
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad Request
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /resource:
    post:
      tags:
        - Resource
      summary: Add a new resource
      description: Add a new resource
      operationId: addResource
      requestBody:
        description: Create a new resource
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
          application/xml:
            schema:
              $ref: "#/components/schemas/Resource"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Resource"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
            application/xml:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Bad request
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Resource
      summary: Retorna todos os Recursos
      description: Retorna todos os Recursos
      operationId: getResource
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
            application/xml:
              schema:
                $ref: "#/components/schemas/Resource"
      security:
        - api_key: []
  /resource/{resourceId}:
    put:
      tags:
        - Resource
      summary: Atualiza um recurso
      description: Atualiza um recurso existente pelo id
      operationId: updateResource
      requestBody:
        description: Atualiza um recurso existente pelo id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
          application/xml:
            schema:
              $ref: "#/components/schemas/Resource"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Resource"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
            application/xml:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Bad request
        "404":
          description: Resource not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Resource
      summary: Procura um recurso pelo ID
      description: Retorna apenas um recurso
      operationId: getResourceById
      parameters:
        - name: resourceId
          in: path
          description: ID do recurso que vai ser retornado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
            application/xml:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Bad request
        "404":
          description: Resource not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - Resource
      summary: Remove um recurso
      description: Remove um recurso pelo seu ID
      operationId: deleteResource
      parameters:
        - name: resourceId
          in: path
          description: ID do recurso que será removido
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Bad request
        "404":
          description: Resource not found
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /inventory:
    post:
      tags:
        - Inventory
      summary: Adiciona um novo inventário
      description: Adiciona um novo inventário
      operationId: addInventory
      requestBody:
        description: Adiciona um novo inventário
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Inventory"
          application/xml:
            schema:
              $ref: "#/components/schemas/Inventory"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Inventory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
            application/xml:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Bad request
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Inventory
      summary: Lista todos os inventários
      description: Lista todos os inventários
      operationId: getInventory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
            application/xml:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Bad request
        "404":
          description: Inventory not found
      security:
        - api_key: []
  /inventory/{inventoryId}:
    put:
      tags:
        - Inventory
      summary: Atualiza um inventário existente
      description: Atualiza um inventário existente pelo ID.
      operationId: updateInventory
      requestBody:
        description: Atualiza um inventário pelo ID.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Inventory"
          application/xml:
            schema:
              $ref: "#/components/schemas/Inventory"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Inventory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
            application/xml:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Bad request
        "404":
          description: Inventory not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - Inventory
      summary: Procura um inventário pelo ID
      description: Retorna somente um inventário
      operationId: getInventoryById
      parameters:
        - name: inventoryId
          in: path
          description: ID do inventário para procura
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
            application/xml:
              schema:
                $ref: "#/components/schemas/Inventory"
        "400":
          description: Bad request
        "404":
          description: Inventory not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets

  /user:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - User
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - User
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - User
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

components:
  schemas:
    DoctorRequestDTO:
      type: object
      properties:
        name:
          type: string
        specialization:
          type: string
      example:
        name: Társila
        specialization: Oftalmologista

    InventoryRequestDTO:
      type: object
      properties:
        idResource:
          type: integer
          format: int64
        idUsf:
          type: integer
          format: int64
        amount:
          type: integer
      example:
        idResource: 1
        idUsf: 1
        amount: 50

    ResourceRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
      example:
        name: Gaze
        description: Usada pra fazer curativos em machucados na pele
        category: EQUIPAMENTO

    SolicitationRequestDTO:
      type: object
      properties:
        idResource:
          type: integer
          format: int64
        idUsf:
          type: integer
          format: int64
        necessaryAmount:
          type: integer
          format: int64
      example:
        idResource: 1
        idUsf: 1
        necessaryAmount: 50

    SolicitationUpdateRequestDTO:
      type: object
      properties:
        necessaryAmount:
          type: integer
          format: int64
      example:
        necessaryAmount: 30

    TeamRequestDTO:
      type: object
      properties:
        color:
          type: string
      example:
        color: azul

    UsfRequestDTO:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      example:
        name: Unidade de Saúde da Família da Avenida 2 de Julho
        address: Avenida 2 de Julho, número 15

    UserRequestDTO:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string
      example:
        name: Gustavo
        login: admin
        password: 12345

    UserUpdateRequestDTO:
      type: object
      properties:
        oldPassword:
          type: string
        name:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: 12345
        name: Miguel
        password: 54321

    CreateUserRoleDTO:
      type: object
      properties:
        idUser:
          type: integer
          format: int64
        idRoles:
          type: array
          items:
            type: integer
            format: int64
      example:
        idUser: 1
        idRoles: [1, 2, 3]

    TeamEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        color:
          type: string
      example:
        id: 1
        color: azul

    DoctorResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        specialization:
          type: string
        team:
          $ref: "#/components/schemas/TeamEntity"
      example:
        id: 1
        name: Gabriel
        specialization: Dermatologista

    DoctorResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        doctor:
          type: array
          items:
            $ref: "#/components/schemas/DoctorResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    ResourceEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [EQUIPAMENTO, MEDICAMENTO]
      example:
        id: 1
        name: ÁLCOOL
        description: Álcool 70% antisseptico
        category: EQUIPAMENTO

    UsfEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
      example:
        id: 1
        name: Unidade de Saúde da Família da Avenida 2 de Julho
        address: Avenida 2 de Julho, número 15

    InventoryResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resource:
          $ref: "#/components/schemas/ResourceEntity"
        usf:
          $ref: "#/components/schemas/UsfEntity"
        amount:
          type: integer
      example:
        id: 1
        amount: 67

    InventoryResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        inventory:
          type: array
          items:
            $ref: "#/components/schemas/InventoryResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    ResourceResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [EQUIPAMENTO, MEDICAMENTO]
      example:
        id: 1
        name: ÁLCOOL
        description: Álcool 70% antisseptico
        category: EQUIPAMENTO

    ResourceResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        resources:
          type: array
          items:
            $ref: "#/components/schemas/ResourceResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    SolicitationResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resource:
          $ref: "#/components/schemas/ResourceEntity"
        requestDate:
          type: string
          format: date-time
        answerDate:
          type: string
          format: date-time
        statusSolicitation:
          type: string
          enum: [PENDENTE, CONCLUIDO, CANCELADO]
        usf:
          $ref: "#/components/schemas/UsfEntity"
        necessaryAmount:
          type: integer
          format: int64
      example:
        id: 1
        requestDate: 2023-01-03T11:12:32Z
        answerDate: null
        statusSolicitation: PENDENTE
        necessaryAmount: 32

    SolicitationResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        solicitation:
          type: array
          items:
            $ref: "#/components/schemas/SolicitationResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    DoctorEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        specilization:
          type: string
      example:
        id: 1
        name: Marcos
        specialization: Cardiologista

    TeamResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        color:
          type: string
        currentUsf:
          $ref: "#/components/schemas/UsfEntity"
        doctors:
          type: array
          items:
            $ref: "#/components/schemas/DoctorEntity"
      example:
        id: 1
        color: vermelho

    UsfResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        currentTeam:
          $ref: "#/components/schemas/TeamEntity"
        address:
          type: string
      example:
        id: 1
        name: Unidade de Saúde da Família da Avenida 2 de Julho
        address: Avenida 2 de Julho, número 15

    UsfResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        usf:
          type: array
          items:
            $ref: "#/components/schemas/UsfResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    UserResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        login:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"

    Request:
      type: object
      properties:
        idRequest:
          type: integer
          format: int64
          example: 1
        idResource:
          type: integer
          format: int64
          example: 10
        answeredDate:
          type: string
          example: 29/12/2022
        statusRequest:
          type: string
          example: approved
        idUsf:
          type: integer
          example: 7

    Order:
      type: object
      properties:
        idTeam:
          type: integer
          format: int64
          example: 10
        doctorId:
          type: integer
          format: int64
          example: 1
        color:
          type: string
          description: Color of the Team
          example: blue
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Inventory:
      type: object
      properties:
        idResource:
          type: integer
          format: int64
          example: 4511
        idUsf:
          type: integer
          format: int64
          example: 1
        ammount:
          type: integer
          format: int64
          example: 50000
    Resource:
      type: object
      properties:
        idResource:
          type: integer
          format: int64
          example: 4511
        name:
          type: string
          example: Vacina cepa H1N1/H3N2/B
        description:
          type: string
          example: Vacina trivalente previne contra três tipos de vírus influenza.
        category:
          type: string
          example: Vacinas
        status:
          type: string
          example: in storage
        minAmmount:
          type: integer
          format: int64
          example: 450000
    Team:
      type: object
      properties:
        idTeam:
          type: integer
          format: int64
          example: 10
        idDoctor:
          type: integer
          format: int64
          example: 1
        color:
          type: string
          example: blue
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Usf:
      type: object
      properties:
        idUsf:
          type: integer
          format: int64
          example: 3
        name:
          type: string
          example: USF de São Pedro
        idCurrentTeam:
          type: integer
          format: int64
          example: 47
    Pet:
      required:
        - name
        - occupation
        - idTeam
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        idTeam:
          type: integer
          format: int64
          example: null
        name:
          type: string
          example: Pedro Afonso
        occupation:
          type: string
          example: Doctor
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
