openapi: 3.0.3
info:
  title: Swagger USF API - OpenAPI 0.0.1
  description: |-
    A USF (Unidade de Saúde da Família) nada mais é que uma unidade pública de saúde destinada
    a realizar atenção contínua nas especialidades básicas, com uma equipe multiprofissional
    habiitada para desenvolver as atividades de promoção, proteção e recuperação, características
    do nível primário de atenção. Após conversa com funcionários dessas unidades notamos que há uma
    complexidade na gestão desse ambiente, pois precisam fazer a comunicação com outras USFs, seja para
    realizar pedidos de recursos ou para gestão de profissionais, de maneira manual através de pranchetas 
    e documentos por escrito. Fazendo o sistema desses ambientes vitais para o cuidado das comunidades brasileiras 
    ficam propensos a erros e lentidão no atendimento.

    Objetivando desenvolvimento para esse serviço, desenvolvemos uma API, para automatizar esses processos defasados.


    Alguns links que podem ser interessantes:
    - [Repositório da USF API](https://github.com/solanokruger/usf-project)
    - [Toda documentação do projeto](https://docs.google.com/document/d/1Rgm3JiFKQBkO_tDVDDw1Mr-FGm9hP7MV-BGx2f4m3HE/edit?usp=sharing)
  termsOfService: http://swagger.io/terms/
  contact:
    email: luis.gustavo@compasso.com.br
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: API local
tags:
  - name: Doctor
    description: Tudo sobre os Doutores.
  - name: Team
    description: Tudo sobre os Times.
  - name: USF
    description: Tudo sobre as USFs.
  - name: Solicitation
    description: Tudo sobre as solicitações.
  - name: Resource
    description: Tudo sobre os recursos.
  - name: Inventory
    description: Tudo sobre o inventário.
  - name: User
    description: Tudo sobre os usuários.
paths:
  /doctor:
    post:
      tags:
        - Doctor
      summary: Adiciona um novo Doutor.
      description: Adicionar um novo Doutor no banco.
      operationId: addDoctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorRequestDTO"
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

    get:
      tags:
        - Doctor
      summary: Listar todos Doutores
      description: Retorna uma lista de Doutores
      operationId: getDoctor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseParameters"

  /doctor/{idDoctor}:
    get:
      tags:
        - Doctor
      summary: Procura um Doutor pelo ID
      description: Retorna apenas um Doutor
      operationId: getDoctorById
      parameters:
        - name: doctorId
          in: path
          description: ID do Doutor para buscar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDTO"
        "404":
          description: DOCTOR NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    put:
      tags:
        - Doctor
      summary: Atualiza um Doutor existente
      description: Atualiza um Doutor existente pelo ID
      operationId: updateDoctor
      parameters:
        - name: doctorId
          in: path
          description: ID do Doutor para atualizar.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorRequestDTO"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: DOCTOR NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Doctor
      summary: Remove um Doutor pelo ID
      description: Remove um Doutor pelo ID
      operationId: deleteDoctor
      parameters:
        - name: doctorId
          in: path
          description: ID do Doutor para remover
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: DOCTOR NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /doctor{idDoctor}/team/{idTeam}:
    post:
      tags:
        - Doctor
      summary: Vincula um Doutor a um Time
      description: Vincula um Doutor a um Time
      operationId: linkDoctorTeam
      parameters:
        - name: idDoctor
          in: path
          description: ID do Doutor a ser vinculado.
          required: true
          schema:
            type: integer
            format: int64
        - name: idTeam
          in: path
          description: ID do Time que o Doutor irá ser vinculado.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDTO"
        "404":
          description: DOCTOR OR TEAM NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Doctor
      summary: Remove o Doutor de um Time
      description: Remove um Doutor de um time específico.
      operationId: deleteDoctorTeam
      parameters:
        - name: idDoctor
          in: path
          description: ID do Doutor a ser removido.
          required: true
          schema:
            type: integer
            format: int64
        - name: idTeam
          in: path
          description: ID do time que o Doutor irá ser removido.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDTO"
        "404":
          description: DOCTOR OR TEAM NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /team:
    post:
      tags:
        - Team
      summary: Adiciona um novo time.
      description: Adiciona um novo time.
      operationId: addTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamRequestDTO"
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

    get:
      tags:
        - Team
      summary: Retorna todos os times
      description: Retorna uma lista com todos os times
      operationId: getTeam
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamResponseDTO"

  /team/{idTeam}:
    get:
      tags:
        - Team
      summary: Procura um time pelo ID
      description: Retorna apenas um time
      operationId: getTeamById
      parameters:
        - name: idTeam
          in: path
          description: ID do time para Requisição.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "404":
          description: TEAM NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    put:
      tags:
        - Team
      summary: Atualiza um time
      description: Atualiza um time existente pelo ID
      operationId: updateTeam
      parameters:
        - name: idTeam
          in: path
          description: ID do time para Requisição.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Atualiza o time
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamRequestDTO"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: TEAM NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Team
      summary: Remove um time
      description: Remove um time
      operationId: deleteTeam
      parameters:
        - name: idTeam
          in: path
          description: ID do time para deletar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: TEAM NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /team/{idTeam}/doctor:
    get:
      tags:
        - Team
      summary: Retorna todos os doutores em um time
      description: Retorna uma lista com todos os doutores de um time
      operationId: getDoctorsByTeam
      parameters:
        - name: idTeam
          in: path
          description: ID do time para Requisição.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DoctorResponseDTO"
        "404":
          description: TEAM NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /team{idTeam}/usf/{idUsf}:
    post:
      tags:
        - Team
      summary: Vincula um time a uma usf
      description: Vincula um time a uma usf
      operationId: linkDoctorTeam
      parameters:
        - name: idTeam
          in: path
          description: ID do time que vai ser vinculado.
          required: true
          schema:
            type: integer
            format: int64
        - name: idUsf
          in: path
          description: ID da USF que vai ser vinculada.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "404":
          description: TEAM OR USF NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Team
      summary: Remove um time de uma USF
      description: Remove um determinado time de uma determinada USF
      operationId: deleteTeamUsf
      parameters:
        - name: idTeam
          in: path
          description: ID do time que vai ser removido.
          required: true
          schema:
            type: integer
            format: int64
        - name: idUsf
          in: path
          description: ID da Usf que vai ser removida.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "404":
          description: TEAM OR USF NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /usf:
    post:
      tags:
        - USF
      summary: Cadastra uma nova USF
      description: Cadastra uma nova USF
      operationId: addUsf
      requestBody:
        required: true
        description: Cadastra uma nova USF
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsfRequestDTO"
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsfResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

    get:
      tags:
        - USF
      summary: Lista todas USFs
      description: Retorna todas Usfs
      operationId: getUsf
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsfResponseParameters"

  /usf/{idUsf}:
    get:
      tags:
        - USF
      summary: Procura uma USF pelo ID
      description: Retorna uma USF
      operationId: getUsfById
      parameters:
        - name: usfId
          in: path
          description: ID da USF para retornar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsfResponseDTO"
        "404":
          description: USF NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    put:
      tags:
        - USF
      summary: Atualiza uma USF existente
      description: Atualiza uma USF existente pelo Id
      operationId: updateUsf
      requestBody:
        description: Atualiza uma USF existente pelo Id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsfRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsfResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: USF NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - USF
      summary: Remove a USF
      description: Remove a USF
      operationId: deleteUsf
      parameters:
        - name: usfId
          in: path
          description: ID da USF para remover.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: USF NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /solicitation:
    post:
      tags:
        - Solicitation
      summary: Adiciona uma nova Solicitação
      description: Adiciona uma nova Solicitação
      operationId: addSolicitation
      requestBody:
        description: Cria uma nova Solicitação
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolicitationRequestDTO"
        required: true
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolicitationResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

    get:
      tags:
        - Solicitation
      summary: Lista todas Solicitações
      description: Retorna todas Solicitações
      operationId: getSolicitations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolicitationResponseParameters"

  /solicitation/{solicitationId}:
    get:
      tags:
        - Solicitation
      summary: Procura a Solicitação pelo ID
      description: Retorna uma solicitação
      operationId: getSolicitationById
      parameters:
        - name: solicitationId
          in: path
          description: ID da Solicitação
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolicitationResponseDTO"
        "404":
          description: SOLICITATION NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    put:
      tags:
        - Solicitation
      summary: Atualiza uma Solicitação
      description: Atualiza uma Solicitação pelo ID.
      operationId: updateSolicitation
      parameters:
        - name: solicitationId
          in: path
          description: ID da Solicitação
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Atualiza uma solicitação pelo ID.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolicitationUpdateRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolicitationResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: SOLICITATION NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Solicitation
      summary: Remove a Solicitação
      description: Remove a Solicitação
      operationId: deleteSolicitation
      parameters:
        - name: solicitationId
          in: path
          description: ID da Solicitação para remover
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: SOLICITATION NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /resource:
    post:
      tags:
        - Resource
      summary: Adiciona um novo recurso
      description: Adiciona um novo recurso
      operationId: addResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceRequestDTO"
        required: true
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

    get:
      tags:
        - Resource
      summary: Retorna todos os Recursos
      description: Retorna todos os Recursos
      operationId: getResource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceResponseParameters"

  /resource/{resourceId}:
    get:
      tags:
        - Resource
      summary: Procura um recurso pelo ID
      description: Retorna apenas um recurso
      operationId: getResourceById
      parameters:
        - name: resourceId
          in: path
          description: ID do recurso que vai ser retornado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceResponseDTO"
        "404":
          description: RESOURCE NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    put:
      tags:
        - Resource
      summary: Atualiza um recurso
      description: Atualiza um recurso existente pelo id
      operationId: updateResource
      parameters:
        - name: resourceId
          in: path
          description: ID do recurso que vai ser retornado
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Atualiza um recurso existente pelo id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: RESOURCE NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Resource
      summary: Remove um recurso
      description: Remove um recurso pelo seu ID
      operationId: deleteResource
      parameters:
        - name: resourceId
          in: path
          description: ID do recurso que será removido
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: RESOURCE NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /inventory:
    post:
      tags:
        - Inventory
      summary: Adiciona um novo inventário
      description: Adiciona um novo inventário
      operationId: addInventory
      requestBody:
        description: Adiciona um novo inventário
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryRequestDTO"
        required: true
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

    get:
      tags:
        - Inventory
      summary: Lista todos os inventários
      description: Lista todos os inventários
      operationId: getInventory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponseParameters"

  /inventory/{inventoryId}:
    get:
      tags:
        - Inventory
      summary: Procura um inventário pelo ID
      description: Retorna somente um inventário
      operationId: getInventoryById
      parameters:
        - name: inventoryId
          in: path
          description: ID do inventário para procura
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponseDTO"
        "404":
          description: INVENTORY NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    put:
      tags:
        - Inventory
      summary: Atualiza um inventário existente
      description: Atualiza um inventário existente pelo ID.
      operationId: updateInventory
      parameters:
        - name: inventoryId
          in: path
          description: ID do inventário para procura
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Atualiza um inventário pelo ID.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: INVENTORY NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

    delete:
      tags:
        - Inventory
      summary: Remove um inventário
      description: Remove um inventário pelo seu ID
      operationId: deleteInventory
      parameters:
        - name: inventoryId
          in: path
          description: ID do inventário que será removido
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: INVENTORY NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /user/create:
    post:
      tags:
        - User
      summary: Cria usuário
      description: Usuários só podem ser criados pelo administrador
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDTO"
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

  /user/update/{id}:
    post:
      tags:
        - User
      summary: Atualiza usuário
      description: Utualiza dados do usuário por id
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserRequestUpdateDTO"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"
        "404":
          description: USER NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

  /user/role:
    post:
      tags:
        - User
      summary: Define cargos no sistema ao usuário
      description: Define cargos no sistema ao usuário através do id
      operationId: setRoleUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRoleDTO"
      responses:
        "200":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodArgumentNotValidException"

  /login:
    post:
      tags:
        - Login
      summary: Loga no sistema
      description: Usa o login e senha e recebe um token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtTokenData"
        "404":
          description: USER NOT FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"

components:
  schemas:
    DoctorRequestDTO:
      type: object
      properties:
        name:
          type: string
        specialization:
          type: string
      example:
        name: Társila
        specialization: Oftalmologista

    InventoryRequestDTO:
      type: object
      properties:
        idResource:
          type: integer
          format: int64
        idUsf:
          type: integer
          format: int64
        amount:
          type: integer
      example:
        idResource: 1
        idUsf: 1
        amount: 50

    ResourceRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
      example:
        name: Gaze
        description: Usada pra fazer curativos em machucados na pele
        category: EQUIPAMENTO

    SolicitationRequestDTO:
      type: object
      properties:
        idResource:
          type: integer
          format: int64
        idUsf:
          type: integer
          format: int64
        necessaryAmount:
          type: integer
          format: int64
      example:
        idResource: 1
        idUsf: 1
        necessaryAmount: 50

    SolicitationUpdateRequestDTO:
      type: object
      properties:
        necessaryAmount:
          type: integer
          format: int64
      example:
        necessaryAmount: 30

    TeamRequestDTO:
      type: object
      properties:
        color:
          type: string
      example:
        color: azul

    UsfRequestDTO:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      example:
        name: Unidade de Saúde da Família da Avenida 2 de Julho
        address: Avenida 2 de Julho, número 15

    UserRequestDTO:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string
      example:
        name: Gustavo
        login: admin
        password: 12345

    UserRequestUpdateDTO:
      type: object
      properties:
        oldPassword:
          type: string
        name:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: 12345
        name: Miguel
        password: 54321

    CreateUserRoleDTO:
      type: object
      properties:
        idUser:
          type: integer
          format: int64
        idRoles:
          type: array
          items:
            type: integer
            format: int64
      example:
        idUser: 1
        idRoles: [1, 2, 3]

    TeamEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        color:
          type: string
      example:
        id: 1
        color: azul

    DoctorResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        specialization:
          type: string
        team:
          $ref: "#/components/schemas/TeamEntity"
      example:
        id: 1
        name: Társila
        specialization: Oftalmologista

    DoctorResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        doctor:
          type: array
          items:
            $ref: "#/components/schemas/DoctorResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    ResourceEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [EQUIPAMENTO, MEDICAMENTO]
      example:
        id: 1
        name: ÁLCOOL
        description: Álcool 70% antisseptico
        category: EQUIPAMENTO

    UsfEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
      example:
        id: 1
        name: Unidade de Saúde da Família da Avenida 2 de Julho
        address: Avenida 2 de Julho, número 15

    InventoryResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resource:
          $ref: "#/components/schemas/ResourceEntity"
        usf:
          $ref: "#/components/schemas/UsfEntity"
        amount:
          type: integer
      example:
        id: 1
        amount: 67

    InventoryResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        inventory:
          type: array
          items:
            $ref: "#/components/schemas/InventoryResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    ResourceResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [EQUIPAMENTO, MEDICAMENTO]
      example:
        id: 1
        name: Gaze
        description: Usada pra fazer curativos em machucados na pele
        category: EQUIPAMENTO

    ResourceResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        resources:
          type: array
          items:
            $ref: "#/components/schemas/ResourceResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    SolicitationResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resource:
          $ref: "#/components/schemas/ResourceEntity"
        requestDate:
          type: string
          format: date-time
        answerDate:
          type: string
          format: date-time
        statusSolicitation:
          type: string
          enum: [PENDENTE, CONCLUIDO, CANCELADO]
        usf:
          $ref: "#/components/schemas/UsfEntity"
        necessaryAmount:
          type: integer
          format: int64
      example:
        id: 1
        requestDate: 2023-01-03T11:12:32Z
        answerDate: null
        statusSolicitation: PENDENTE
        necessaryAmount: 50

    SolicitationResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        solicitation:
          type: array
          items:
            $ref: "#/components/schemas/SolicitationResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    DoctorEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        specilization:
          type: string
      example:
        id: 1
        name: Marcos
        specialization: Cardiologista

    TeamResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        color:
          type: string
        currentUsf:
          $ref: "#/components/schemas/UsfEntity"
        doctors:
          type: array
          items:
            $ref: "#/components/schemas/DoctorEntity"
      example:
        id: 1
        color: azul

    UsfResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        currentTeam:
          $ref: "#/components/schemas/TeamEntity"
        address:
          type: string
      example:
        id: 1
        name: Unidade de Saúde da Família da Avenida 2 de Julho
        address: Avenida 2 de Julho, número 15

    UsfResponseParameters:
      type: object
      properties:
        numberOfElements:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        usf:
          type: array
          items:
            $ref: "#/components/schemas/UsfResponseDTO"
      example:
        numberOfElements: 10
        totalElements: 10
        totalPages: 1

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    UserResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        login:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"

    MethodArgumentNotValidException:
      type: object
      properties:
        details:
          type: string
        errorCode:
          type: string
        httpStatus:
          type: string

    NotFoundException:
      type: object
      properties:
        details:
          type: string
        errorCode:
          type: string
        httpStatus:
          type: string

    AuthenticationData:
      type: object
      properties:
        login:
          type: string
        password:
          type: string

    JwtTokenData:
      type: object
      properties:
        jwtToken:
          type: string
